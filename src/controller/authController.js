// controller/authController.js
const { User } = require('../models');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');

// L·∫•y JWT secret t·ª´ bi·∫øn m√¥i tr∆∞·ªùng ho·∫∑c s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh
const JWT_SECRET = process.env.JWT_SECRET || 'your-jwt-secret-key';

const authController = {
	// ƒêƒÉng nh·∫≠p ng∆∞·ªùi d√πng
	login: async (req, res) => {
		try {
			// Ki·ªÉm tra d·ªØ li·ªáu g·ª≠i l√™n t·ª´ client
			console.log("üîç Request body:", req.body);

			const { email, password } = req.body;

			// Ki·ªÉm tra n·∫øu kh√¥ng c√≥ email ho·∫∑c password
			if (!email || !password) {
				console.log("‚ö†Ô∏è Thi·∫øu email ho·∫∑c m·∫≠t kh·∫©u");
				return res.status(400).json({ message: "Thi·∫øu email ho·∫∑c m·∫≠t kh·∫©u" });
			}

			// T√¨m ng∆∞·ªùi d√πng trong database
			const user = await User.findOne({ where: { email } });

			console.log("üîç T√¨m user theo email:", user);

			if (!user) {
				console.log("‚ùå Kh√¥ng t√¨m th·∫•y user v·ªõi email:", email);
				return res.status(401).json({ message: "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng" });
			}

			// Ki·ªÉm tra m·∫≠t kh·∫©u
			console.log("üîç M·∫≠t kh·∫©u nh·∫≠p v√†o:", password);
			console.log("üîç M·∫≠t kh·∫©u trong database:", user.password);

			const isPasswordValid = await bcrypt.compare(password, user.password);
			console.log("üîç M·∫≠t kh·∫©u h·ª£p l·ªá?", isPasswordValid);

			if (!isPasswordValid) {
				console.log("‚ùå Sai m·∫≠t kh·∫©u");
				return res.status(401).json({ message: "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng" });
			}

			// T·∫°o JWT token
			// T·∫°o JWT token (L∆∞u √Ω: d√πng user.userID thay v√¨ user.id)
			// T·∫°o JWT token (ƒë·∫£m b·∫£o d√πng `userID` ƒë√∫ng v·ªõi Sequelize model)
			const token = jwt.sign(
				{ userID: user.userID, email: user.email }, // ‚ö† ƒê√∫ng t√™n field trong model Sequelize
				JWT_SECRET,
				{ expiresIn: '24h' }
			);



			// Lo·∫°i b·ªè m·∫≠t kh·∫©u kh·ªèi response
			const { password: _, ...userWithoutPassword } = user.toJSON();

			console.log("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng:", userWithoutPassword);

			return res.status(200).json({
				user: userWithoutPassword,
				token
			});
		} catch (error) {
			console.error("‚ùå L·ªói khi ƒëƒÉng nh·∫≠p:", error);
			return res.status(500).json({ message: "L·ªói server khi ƒëƒÉng nh·∫≠p" });
		}
	},


	// L·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i
	getCurrentUser: async (req, res) => {
		try {
			console.log("üîç User t·ª´ middleware:", req.user);

			// L·∫•y user b·∫±ng userID
			const user = await User.findByPk(req.user.userID, {
				attributes: { exclude: ['password'] }
			});

			if (!user) {
				return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
			}

			return res.status(200).json(user);
		} catch (error) {
			console.error("‚ùå L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:", error);
			return res.status(500).json({ message: "L·ªói server khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng" });
		}
	}

};

module.exports = authController;